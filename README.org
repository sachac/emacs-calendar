#+TITLE: Emacs calendar

* Actions  :noexport:

#+CALL: sync() :results none :eval never-export

#+NAME: main
#+begin_src emacs-lisp :noweb yes :results silent
<<announce>>
(defun my/prepare-calendar-for-export ()
  (interactive)
  (with-current-buffer (find-file-noselect "~/code/emacs-calendar/README.org")
  (goto-char (point-min))
  (re-search-forward "#\\+NAME: event-summary")
  (org-ctrl-c-ctrl-c)
  (org-export-to-file 'html "README.html")
  (unless my/laptop-p (my/schedule-announcements-for-upcoming-emacs-meetups))
  (when my/laptop-p
    (org-babel-goto-named-result "event-summary")
    (re-search-forward "^- ")
    (goto-char (match-beginning 0))
    (let ((events (org-babel-read-result)))
      (oddmuse-edit "EmacsWiki" "Usergroups")
      (goto-char (point-min))
      (delete-region (progn (re-search-forward "== Upcoming events ==\n\n") (match-end 0))
                     (progn (re-search-forward "^$") (match-beginning 0)))
      (save-excursion (insert (mapconcat (lambda (s) (concat "* " (car s) "\n")) events "")))))))
(my/prepare-calendar-for-export)
#+end_src

(find-file "~/sync/emacs-news/index.org")
[[elisp:(org-export-to-file 'html "README.html")]]
[[elisp:my/schedule-announcements-for-upcoming-emacs-meetups]]

* Upcoming events

#+NAME: event-summary
#+CALL: update() :results output drawer :eval never-export 

#+RESULTS: event-summary
:results:

- EmacsConf Office Hour https://emacsconf.org/2021/office-hours/ Tue Sep 7 1800 Vancouver / 2000 Chicago / 2100 Toronto -- Wed Sep 8 0100 GMT / 0300 Berlin / 0630 Kolkata / 0900 Singapore
- EmacsConf Office Hour https://emacsconf.org/2021/office-hours/ Fri Sep 10 2100 Vancouver / 2300 Chicago -- Sat Sep 11 0000 Toronto / 0400 GMT / 0600 Berlin / 0930 Kolkata / 1200 Singapore
- EmacsConf Office Hour https://emacsconf.org/2021/office-hours/ Sat Sep 11 0800 Vancouver / 1000 Chicago / 1100 Toronto / 1500 GMT / 1700 Berlin / 2030 Kolkata / 2300 Singapore
- EmacsConf Office Hour https://emacsconf.org/2021/office-hours/ Tue Sep 14 1800 Vancouver / 2000 Chicago / 2100 Toronto -- Wed Sep 15 0100 GMT / 0300 Berlin / 0630 Kolkata / 0900 Singapore
- EmacsSF: Emacs Lisp: Org-mode Hacks https://www.meetup.com/Emacs-SF/events/280469304/ Thu Sep 16 1000 Vancouver / 1200 Chicago / 1300 Toronto / 1700 GMT / 1900 Berlin / 2230 Kolkata -- Fri Sep 17 0100 Singapore
- M-x Research (contact them for password): TBA https://m-x-research.github.io/ Fri Sep 17 0700 Vancouver / 0900 Chicago / 1000 Toronto / 1400 GMT / 1600 Berlin / 1930 Kolkata / 2200 Singapore
- EmacsConf Office Hour https://emacsconf.org/2021/office-hours/ Fri Sep 17 2100 Vancouver / 2300 Chicago -- Sat Sep 18 0000 Toronto / 0400 GMT / 0600 Berlin / 0930 Kolkata / 1200 Singapore
- EmacsConf Office Hour https://emacsconf.org/2021/office-hours/ Sat Sep 18 0800 Vancouver / 1000 Chicago / 1100 Toronto / 1500 GMT / 1700 Berlin / 2030 Kolkata / 2300 Singapore
- EmacsConf Office Hour https://emacsconf.org/2021/office-hours/ Tue Sep 21 1800 Vancouver / 2000 Chicago / 2100 Toronto -- Wed Sep 22 0100 GMT / 0300 Berlin / 0630 Kolkata / 0900 Singapore
- EmacsConf Office Hour https://emacsconf.org/2021/office-hours/ Fri Sep 24 2100 Vancouver / 2300 Chicago -- Sat Sep 25 0000 Toronto / 0400 GMT / 0600 Berlin / 0930 Kolkata / 1200 Singapore
- Emacs APAC (virtual, in English) https://emacs-apac.gitlab.io/ Sat Sep 25 0130 Vancouver / 0330 Chicago / 0430 Toronto / 0830 GMT / 1030 Berlin / 1400 Kolkata / 1630 Singapore
- EmacsConf Office Hour https://emacsconf.org/2021/office-hours/ Sat Sep 25 0800 Vancouver / 1000 Chicago / 1100 Toronto / 1500 GMT / 1700 Berlin / 2030 Kolkata / 2300 Singapore
- EmacsConf Office Hour https://emacsconf.org/2021/office-hours/ Tue Sep 28 1800 Vancouver / 2000 Chicago / 2100 Toronto -- Wed Sep 29 0100 GMT / 0300 Berlin / 0630 Kolkata / 0900 Singapore
- Emacs Berlin (virtual, in English) https://emacs-berlin.org/ Wed Sep 29 0930 Vancouver / 1130 Chicago / 1230 Toronto / 1630 GMT / 1830 Berlin / 2200 Kolkata -- Thu Sep 30 0030 Singapore
- M-x Research (contact them for password): TBA https://m-x-research.github.io/ Fri Oct 1 0700 Vancouver / 0900 Chicago / 1000 Toronto / 1400 GMT / 1600 Berlin / 1930 Kolkata / 2200 Singapore
- EmacsATX: TBD https://www.meetup.com/EmacsATX/events/hkckgsyccnbjb/ Wed Oct 6 1630 Vancouver / 1830 Chicago / 1930 Toronto / 2330 GMT -- Thu Oct 7 0130 Berlin / 0500 Kolkata / 0730 Singapore
- M-x Research (contact them for password): TBA https://m-x-research.github.io/ Fri Oct 15 0700 Vancouver / 0900 Chicago / 1000 Toronto / 1400 GMT / 1600 Berlin / 1930 Kolkata / 2200 Singapore
:end:


* Introduction
  
This calendar is maintained by [[mailto:sacha@sachachua.com][sacha@sachachua.com]]. You can find it at https://emacslife.com/calendar/

You can find a list of upcoming events and other meet-ups at
https://www.emacswiki.org/emacs/Usergroups.

Or you can add this iCal to your calendar program:

[[https://emacslife.com/calendar/emacs-calendar.ics]]

Or you view the following HTML calendars:

#+begin_src emacs-lisp :exports results :var timezones=timezones :results list
  (mapcar (lambda (o) (org-link-make-string (format "file:emacs-calendar-%s.html" (downcase (replace-regexp-in-string "^.*?/" "" (car o)))) (car o))) timezones)
#+end_src

#+RESULTS:
- [[file:emacs-calendar-gmt.html][Etc/GMT]]
- [[file:emacs-calendar-vancouver.html][America/Vancouver]]
- [[file:emacs-calendar-chicago.html][America/Chicago]]
- [[file:emacs-calendar-toronto.html][America/Toronto]]
- [[file:emacs-calendar-kolkata.html][Asia/Kolkata]]
- [[file:emacs-calendar-shanghai.html][Asia/Shanghai]]
- [[file:emacs-calendar-singapore.html][Asia/Singapore]]
- [[file:emacs-calendar-berlin.html][Europe/Berlin]]

(Let me know if you want me to add yours! - [[mailto:sacha@sachachua.com]])

Or you periodically download and include one of these files in your Org agenda files:

#+begin_src emacs-lisp :exports results :var timezones=timezones :wrap export html
(concat "<ul>"
   (mapconcat (lambda (o) (let ((file (concat "emacs-calendar-" (downcase (replace-regexp-in-string "^.*?/" "" (car o))) ".org")))
                         (format "<li><a href=\"%s\">%s</a></li>" file file)))
           timezones "\n")
"</ul>")
#+end_src

#+RESULTS:
#+begin_export html
<ul><li><a href="emacs-calendar-gmt.org">emacs-calendar-gmt.org</a></li>
<li><a href="emacs-calendar-vancouver.org">emacs-calendar-vancouver.org</a></li>
<li><a href="emacs-calendar-chicago.org">emacs-calendar-chicago.org</a></li>
<li><a href="emacs-calendar-toronto.org">emacs-calendar-toronto.org</a></li>
<li><a href="emacs-calendar-kolkata.org">emacs-calendar-kolkata.org</a></li>
<li><a href="emacs-calendar-shanghai.org">emacs-calendar-shanghai.org</a></li>
<li><a href="emacs-calendar-singapore.org">emacs-calendar-singapore.org</a></li>
<li><a href="emacs-calendar-berlin.org">emacs-calendar-berlin.org</a></li></ul>
#+end_export

Enjoy!

* Code I use to run it
** Timezones

#+NAME: timezones
- America/Vancouver
- America/Chicago
- America/Toronto
- Etc/GMT
- Europe/Berlin
- Asia/Kolkata
- Asia/Singapore

** Download and parse the iCal file with Python

#+begin_src sh :results silent :eval never-export
pip3 install icalevents recurring_ical_events pypandoc
#+end_src

#+NAME: update
#+begin_src python :session "cal" :results output drawer :var timezones=timezones :tangle "update.py" :eval never-export
from urllib.request import urlopen
from icalendar import Calendar
from datetime import date, datetime
from dateutil.relativedelta import *
import recurring_ical_events
import pytz
import re
import pypandoc
import subprocess
import sys
import csv

#                 'Singapore': 'Emacs-SG',
other_meetups = {'EmacsNYC': 'New-York-Emacs-Meetup',
                 'EmacsSF': 'Emacs-SF',
                 'EmacsATX': 'EmacsATX',
                 'Boulder': 'Boulder-Emacs-Meetup',
                 'Pelotas, Brazil': 'Pelotas-Emacs-Meetup',
                 'Sao Paulo': 'Grupo-de-usuarios-de-Emacs-de-Sao-Paulo',
                 'Emacs FFM': 'emacs-ffm',
                 'London Emacs Hacking': 'London-Emacs-Hacking',
                 'London Emacs Lisp': 'London-Emacs-Lisp-Meetup',
                 'Stockholm': 'Stockholm-Emacs-Meetup',
                 'Madrid': 'Emacs-Madrid',
                 'Finland': 'Finland-Emacs-User-Group',
                 'Amsterdam': 'Amsterdam-Emacs-Users-Group',
                 'GenEmacs': 'GenEmacs',
                 'Johannesburg': 'Jozi-Emacs-Meetup',
                 'Delhi': 'Emacs-Delhi',
                 'Pune': 'the-peg'}
other_icals = [{'name': 'Atelier Emacs (in French)',
                'source': 'https://mobilizon.fr/@communaute_emacs_francophone/feed/ics'},
               {'name': 'M-x Research (contact them for password)',
                'url': 'https://m-x-research.github.io/',
                'source': 'https://calendar.google.com/calendar/ical/o0tiadljp5dq7lkb51mnvnrh04%40group.calendar.google.com/public/basic.ics',
                'summary_re': r'^M-x Research - '}]
# https://www.meetup.com/Emacs-SF/events/ical/',

def summarized_event(e, timezones):
  times = [[e['DTSTART'].dt.astimezone(pytz.timezone(t[0])), t[0], e['DTSTART'].dt.astimezone(pytz.timezone(t[0])).utcoffset()] for t in timezones]
  times.sort(key=lambda x: x[2])
  s = ""
  for i, t in enumerate(times):
    if i == 0 or t[0].day != times[i - 1][0].day:
       if i > 0:
         s += " -- "
       s += t[0].strftime('%a %b %-d %H%M') + " " + re.sub('^.*?/', '', t[1])
    else:
       s += " / " + t[0].strftime('%H%M') + " " + re.sub('^.*?/', '', t[1])
  return "- %s %s %s" % (e['SUMMARY'], e['LOCATION'], s)
                     

link = "https://calendar.google.com/calendar/ical/c_rkq3fc6u8k1nem23qegqc90l6c%40group.calendar.google.com/public/basic.ics"
f = urlopen(link)
cal = Calendar.from_ical(f.read())
start_date = date(date.today().year, date.today().month, 1)
end_date = date(date.today().year + 1, date.today().month + 1, 1)

for event in cal.walk():
  if event.name == 'VEVENT':
    if event.get('location') == '':
      match = re.search(r'href="([^"]+)"', event.get('description'))
      if not match:
        match = re.search('^(http.*?)(&nbsp;|<br>|\n)', event.get('description'))
      if match:                 
        event['location'] = match.group(1)
      else:
        print(event.get('description'))
                        
def merge_cal(main_cal, name, url, start_date, end_date, info=None):
   try:
     meetup_cal = Calendar.from_ical(urlopen(url).read())
   except:
     print("Error with url: %s" % url)
     return
   meetup_events = recurring_ical_events.of(meetup_cal).between(start_date, end_date)
   for event in meetup_events:
     if info and 'summary_re' in info:
       event['SUMMARY'] = re.sub(info['summary_re'], '', event['SUMMARY'])
     event['SUMMARY'] = name + ': ' + event['SUMMARY']
     event['LOCATION'] = ('URL' in event and event['URL']) or (info and ('url' in info) and info['url'])
     main_cal.add_component(event)

def merge_meetup_events(cal, start_date, end_date):
  global other_meetups
  for name, identifier in other_meetups.items():
    url = "https://www.meetup.com/%s/events/ical/" % (identifier)
    merge_cal(cal, name, url, start_date, end_date)
 
merge_meetup_events(cal, start_date, end_date)
for item in other_icals:
  merge_cal(cal, item['name'], item['source'], start_date, end_date, item)

f = open('emacs-calendar.ics', 'wb')
f.write(cal.to_ical())
f.close()

events = recurring_ical_events.of(cal).between(start_date, end_date)
events.sort(key=lambda x: x['DTSTART'].dt)
files = {}
org_date = "%Y-%m-%d %a %H:%M" # 2006-11-01 Wed 19:15
# Prepare string for copying
highlight_start = datetime.utcnow()
highlight_end = datetime.utcnow() + relativedelta(weeks=+6)

for t in timezones:
  stub = "emacs-calendar-" + re.sub('^.*?/', '', t[0]).lower()
  ical_args = ["ical2html", "-l", "-f", "Times are in " + t[0], "-z", t[0], datetime.today().strftime("%Y%m01"), "P8W", "emacs-calendar.ics"]
  output = subprocess.check_output(ical_args).decode(sys.stdout.encoding)
  changed = re.sub(r'<span class=summary>([^<]+)</span>\n<pre><b class=location>([^<]+)</b></pre>',
                   r'<span class="summary"><a href="\2">\1</a></span>', output)
  f = open(stub + '.html', 'wb')
  f.write(changed.encode(sys.stdout.encoding))
  f.close()
  files[t[0]] = open(stub + '.org', "w")

with open('events.csv', 'w', newline='') as csvfile:
  fieldnames = ['DTSTART', 'DTEND', 'LOCATION', 'SUMMARY', 'TEXT']
  writer = csv.DictWriter(csvfile, fieldnames=fieldnames, extrasaction='ignore')
  writer.writeheader()
  for e in events:
    writer.writerow({**e,
                     'DTSTART': e['DTSTART'].dt.isoformat(),
                     'DTEND': e['DTEND'].dt.isoformat(),
                     'TEXT': summarized_event(e, timezones)
                     })
    
for e in events:
  desc = pypandoc.convert_text(e['DESCRIPTION'], 'org', format='html').replace('\\\\', '')
  utc = datetime.utcfromtimestamp(e['DTSTART'].dt.timestamp())
  if utc >= highlight_start and utc <= highlight_end:
    print(summarized_event(e, timezones))
  for t in timezones:
    zone = pytz.timezone(t[0])
    start = e['DTSTART'].dt.astimezone(zone)
    end = e['DTEND'].dt.astimezone(zone)
    files[t[0]].write("""* %s
:PROPERTIES:
:LOCATION: %s
:END:
<%s>--<%s>

%s

""" % (e['SUMMARY'], e['LOCATION'], start.strftime(org_date), end.strftime(org_date), desc))

#+end_src

#+RESULTS: update
:results:

- EmacsConf 2021 public meeting https://lists.gnu.org/archive/html/emacsconf-discuss/2021-06/msg00001.html Sat Jul 3 0700 Vancouver / 0900 Chicago / 1000 Toronto / 1400 GMT / 1600 Berlin / 1930 Kolkata / 2200 Singapore
- EmacsATX: Literate Config, Elfeed, SMS https://www.meetup.com/EmacsATX/events/278683891/ Wed Jul 7 1630 Vancouver / 1830 Chicago / 1930 Toronto / 2330 GMT -- Thu Jul 8 0130 Berlin / 0500 Kolkata / 0730 Singapore
- M-x Research (contact them for password): TBC https://m-x-research.github.io/ Fri Jul 16 0700 Vancouver / 0900 Chicago / 1000 Toronto / 1400 GMT / 1600 Berlin / 1930 Kolkata / 2200 Singapore
- Emacs APAC (virtual, in English) https://emacs-apac.gitlab.io/ Sat Jul 24 0130 Vancouver / 0330 Chicago / 0430 Toronto / 0830 GMT / 1030 Berlin / 1400 Kolkata / 1630 Singapore
- Emacs Berlin (virtual, in English) https://emacs-berlin.org/ Wed Jul 28 0930 Vancouver / 1130 Chicago / 1230 Toronto / 1630 GMT / 1830 Berlin / 2200 Kolkata -- Thu Jul 29 0030 Singapore
- EmacsATX: TBD https://www.meetup.com/EmacsATX/events/hkckgsycclbgb/ Wed Aug 4 1630 Vancouver / 1830 Chicago / 1930 Toronto / 2330 GMT -- Thu Aug 5 0130 Berlin / 0500 Kolkata / 0730 Singapore
- M-x Research (contact them for password): TBA https://m-x-research.github.io/ Fri Aug 6 0700 Vancouver / 0900 Chicago / 1000 Toronto / 1400 GMT / 1600 Berlin / 1930 Kolkata / 2200 Singapore
:end:

** Sync

#+NAME: sync
#+begin_src sh :exports code :eval never-export
rsync -avze ssh ./ web:/var/www/emacslife.com/calendar/ --exclude=.git
#+end_src

#+RESULTS: sync
:results:
sending incremental file list
README.org
emacs-calendar-berlin.html
emacs-calendar-berlin.org
emacs-calendar-chicago.html
emacs-calendar-chicago.org
emacs-calendar-gmt.html
emacs-calendar-gmt.org
emacs-calendar-kolkata.html
emacs-calendar-kolkata.org
emacs-calendar-singapore.html
emacs-calendar-singapore.org
emacs-calendar-toronto.html
emacs-calendar-toronto.org
emacs-calendar-vancouver.html
emacs-calendar-vancouver.org
emacs-calendar.ics

sent 8,195 bytes  received 6,729 bytes  29,848.00 bytes/sec
total size is 927,214  speedup is 62.13
:end:

** Convert timezones

#+NAME: convert-timezones
#+begin_src emacs-lisp :tangle yes :var timezones=timezones
(defun my/summarize-times (time timezones)
  (let (prev-day)
    (mapconcat
     (lambda (tz)
       (let ((cur-day (format-time-string "%a %b %-e" time tz))
             (cur-time (format-time-string "%H%MH %Z" time tz)))
         (if (equal prev-day cur-day)
             cur-time
           (setq prev-day cur-day)
           (concat cur-day " " cur-time))))
     timezones
     " / ")))

(defun my/org-summarize-event-in-timezones (timezones)
  (interactive (list (or timezones my/timezones)))
  (save-window-excursion
    (save-excursion
      (when (derived-mode-p 'org-agenda-mode) (org-agenda-goto))
      (when (re-search-forward org-element--timestamp-regexp nil (save-excursion (org-end-of-subtree) (point)))
        (goto-char (match-beginning 0))
        (let* ((times (org-element-timestamp-parser))
               (start-time (org-timestamp-to-time (org-timestamp-split-range times)))
               (msg (format "%s - %s - %s"
                            (org-get-heading t t t t)
                            (my/summarize-times start-time timezones)
                            ;; (cond
                            ;;  ((time-less-p (org-timestamp-to-time (org-timestamp-split-range times t)) (current-time))
                            ;;   "(past)")
                            ;;  ((time-less-p (current-time) start-time)
                            ;;   (concat "in " (format-seconds "%D %H %M%Z" (time-subtract start-time (current-time)))))
                            ;;  (t "(ongoing)"))
                            (org-entry-get (point) "LOCATION"))))
          (if (called-interactively-p 'any)
              (progn
                (message "%s" msg)
                (kill-new msg))
            msg))))))
#+end_src

#+RESULTS: convert-timezones
: my/org-summarize-event-in-timezones

#+RESULTS:
: my/org-summarize-event-in-timezones

** Summarize upcoming ones

#+NAME: upcoming-events
#+begin_src emacs-lisp :tangle yes
(defun my/summarize-upcoming-events (limit timezones)
  (interactive (list (org-read-date nil t) my/timezones))
  (let (result)
    (with-current-buffer (find-file-noselect "~/code/emacs-calendar/emacs-calendar-toronto.org")
      (goto-char (point-min))
      (org-map-entries
       (lambda ()
         (save-excursion
           (when (re-search-forward org-element--timestamp-regexp nil (save-excursion (org-end-of-subtree) (point)))
             (goto-char (match-beginning 0))
             (let ((time (org-timestamp-to-time (org-timestamp-split-range (org-element-timestamp-parser)))))
               (when (and (time-less-p (current-time) time)
                          (time-less-p time limit))
                 (setq result (cons
                               (cons time
                                     (my/org-summarize-event-in-timezones timezones)) result)))))))))
    (setq result (mapconcat
                  (lambda (o) (format "- %s" (cdr  o)))
                  (sort result (lambda (a b)
                                 (time-less-p (car a) (car b))
                                 ))
                  "\n"))
    (if (interactive-p)
        (insert result)
      result)))
#+end_src

#+RESULTS:
: my/summarize-upcoming-events


** Announcing Emacs events

#+NAME: announce
#+begin_src emacs-lisp
(defun my/announce-on-irc (channels message host port)
  (with-temp-buffer
    (insert "PASS " erc-password "\n"
            "USER " erc-nick "\n"
            "NICK " erc-nick "\n"
            (mapconcat (lambda (o)
                         (format "PRIVMSG %s :%s\n" o message))
                       channels "")
            "QUIT\n")
    (call-process-region (point-min) (point-max) "ncat" nil 0 nil
                         "--ssl" host (number-to-string port))))

(defun my/announce-on-irc-and-twitter (time channels message host port)
  (when (< (time-to-seconds (subtract-time (current-time) time)) (* 5 60))
    (shell-command-to-string (format
                              (if my/laptop-p
                                  "zsh -l -c 'rvm use 2.4.1; t update %s'"
                                "bash -l -c 't update %s'")
                              (shell-quote-argument message)))
    (my/announce-on-irc channels message host port)))

(defun my/schedule-announcement (time message)
  (interactive (list (org-read-date t t) (read-string "Message: ")))
  (run-at-time time nil #'my/announce-on-irc-and-twitter time '("#emacs" "#emacsconf") message erc-server erc-port))

(defun my/org-table-as-alist (table)
  "Convert TABLE to an alist. Remember to set :colnames no."
  (let ((headers (seq-map 'intern (car table))))
    (cl-loop for x in (cdr table) collect (-zip headers x))))

(defun my/schedule-announcements-for-upcoming-emacs-meetups ()
  (interactive)
  (cancel-function-timers #'my/announce-on-irc-and-twitter)
  (let ((events (my/org-table-as-alist (pcsv-parse-file "events.csv")))
        (now (current-time))
        (before-limit (time-add (current-time) (seconds-to-time (* 14 24 60 60)))))
    (mapc (lambda (o)
            (let* ((start-time (encode-time (parse-time-string (alist-get 'DTSTART o))))
                   (fifteen-minutes-before (seconds-to-time (- (time-to-seconds start-time) (* 15 60)))))
              (when (and (time-less-p now fifteen-minutes-before)
                         (time-less-p fifteen-minutes-before before-limit))
                (my/schedule-announcement fifteen-minutes-before
                                          (format "In 15 minutes: %s - see %s for details"
                                                  (alist-get 'SUMMARY o)
                                                  (alist-get 'LOCATION o))))
              (when (and (time-less-p now start-time)
                         (time-less-p start-time before-limit))
                (my/schedule-announcement start-time
                                          (format "Starting now: %s - see %s for details"
                                                  (alist-get 'SUMMARY o)
                                                  (alist-get 'LOCATION o))))))
          events)))
  #+end_src

  #+RESULTS: announce
  :results:
  my/schedule-announcements-for-upcoming-emacs-meetups
  :end:
  
** Update EmacsWiki

#+begin_src emacs-lisp  :results nil
(use-package oddmuse
:load-path "~/vendor/oddmuse-el"
:if my/laptop-p
:ensure nil
:config (oddmuse-mode-initialize)
:hook (oddmuse-mode-hook .
          (lambda ()
            (unless (string-match "question" oddmuse-post)
              (when (string-match "EmacsWiki" oddmuse-wiki)
                (setq oddmuse-post (concat "uihnscuskc=1;" oddmuse-post)))
              (when (string-match "OddmuseWiki" oddmuse-wiki)
                (setq oddmuse-post (concat "ham=1;" oddmuse-post)))))))
#+end_src


[[elisp:(oddmuse-edit "EmacsWiki" "Usergroups")]]

** Testing agenda files :noexport:

#+begin_src emacs-lisp :exports results :var timezones=timezones :results list
  (mapcar (lambda (o) (org-link-make-string (format "elisp:(let ((org-agenda-files (list (expand-file-name \"emacs-calendar-%s.org\")))) (org-agenda-list nil nil 31))" (downcase (replace-regexp-in-string "^.*?/" "" (car o)))) (format "View %s agenda" (car o)))) timezones)
#+end_src

#+RESULTS:
- [[elisp:(let ((org-agenda-files (list (expand-file-name "emacs-calendar-gmt.org")))) (org-agenda-list nil nil 31))][View Etc/GMT agenda]]
- [[elisp:(let ((org-agenda-files (list (expand-file-name "emacs-calendar-vancouver.org")))) (org-agenda-list nil nil 31))][View America/Vancouver agenda]]
- [[elisp:(let ((org-agenda-files (list (expand-file-name "emacs-calendar-chicago.org")))) (org-agenda-list nil nil 31))][View America/Chicago agenda]]
- [[elisp:(let ((org-agenda-files (list (expand-file-name "emacs-calendar-toronto.org")))) (org-agenda-list nil nil 31))][View America/Toronto agenda]]
- [[elisp:(let ((org-agenda-files (list (expand-file-name "emacs-calendar-kolkata.org")))) (org-agenda-list nil nil 31))][View Asia/Kolkata agenda]]
- [[elisp:(let ((org-agenda-files (list (expand-file-name "emacs-calendar-shanghai.org")))) (org-agenda-list nil nil 31))][View Asia/Shanghai agenda]]
- [[elisp:(let ((org-agenda-files (list (expand-file-name "emacs-calendar-singapore.org")))) (org-agenda-list nil nil 31))][View Asia/Singapore agenda]]
- [[elisp:(let ((org-agenda-files (list (expand-file-name "emacs-calendar-berlin.org")))) (org-agenda-list nil nil 31))][View Europe/Berlin agenda]]



