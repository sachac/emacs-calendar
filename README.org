#+TITLE: Emacs calendar

* Actions  :noexport:

#+CALL: update() :results none :eval never-export
#+CALL: sync() :results none :eval never-export

* Introduction
  
This calendar is maintained by [[mailto:sacha@sachachua.com][sacha@sachachua.com]]. You can find it at https://emacslife.com/calendar/

You can find a list of upcoming events and other meet-ups at
https://www.emacswiki.org/emacs/Usergroups.

Or you can add this iCal to your calendar program:

https://calendar.google.com/calendar/ical/c_rkq3fc6u8k1nem23qegqc90l6c%40group.calendar.google.com/public/basic.ics

Or you view the following HTML calendars:

#+begin_src emacs-lisp :exports results :var timezones=timezones :results list
  (mapcar (lambda (o) (org-link-make-string (format "file:emacs-calendar-%s.html" (downcase (replace-regexp-in-string "^.*?/" "" (car o)))) (car o))) timezones)
#+end_src

#+RESULTS:
- [[file:emacs-calendar-gmt.html][Etc/GMT]]
- [[file:emacs-calendar-vancouver.html][America/Vancouver]]
- [[file:emacs-calendar-chicago.html][America/Chicago]]
- [[file:emacs-calendar-toronto.html][America/Toronto]]
- [[file:emacs-calendar-kolkata.html][Asia/Kolkata]]
- [[file:emacs-calendar-shanghai.html][Asia/Shanghai]]
- [[file:emacs-calendar-singapore.html][Asia/Singapore]]
- [[file:emacs-calendar-berlin.html][Europe/Berlin]]

(Let me know if you want me to add yours! - [[mailto:sacha@sachachua.com]])

Or you periodically download and include one of these files in your Org agenda files:

#+begin_src emacs-lisp :exports results :var timezones=timezones :wrap export html
(concat "<ul>"
   (mapconcat (lambda (o) (let ((file (concat "emacs-calendar-" (downcase (replace-regexp-in-string "^.*?/" "" (car o))) ".org")))
                         (format "<li><a href=\"%s\">%s</a></li>" file file)))
           timezones "\n")
"</ul>")
#+end_src

#+RESULTS:
#+begin_export html
<ul><li><a href="emacs-calendar-gmt.org">emacs-calendar-gmt.org</a></li>
<li><a href="emacs-calendar-vancouver.org">emacs-calendar-vancouver.org</a></li>
<li><a href="emacs-calendar-chicago.org">emacs-calendar-chicago.org</a></li>
<li><a href="emacs-calendar-toronto.org">emacs-calendar-toronto.org</a></li>
<li><a href="emacs-calendar-kolkata.org">emacs-calendar-kolkata.org</a></li>
<li><a href="emacs-calendar-shanghai.org">emacs-calendar-shanghai.org</a></li>
<li><a href="emacs-calendar-singapore.org">emacs-calendar-singapore.org</a></li>
<li><a href="emacs-calendar-berlin.org">emacs-calendar-berlin.org</a></li></ul>
#+end_export

Enjoy!

* Code I use to run it
** Timezones

#+NAME: timezones
- Etc/GMT
- America/Vancouver
- America/Chicago
- America/Toronto
- Asia/Kolkata
- Asia/Shanghai
- Asia/Singapore
- Europe/Berlin

** Download and parse the iCal file with Python

#+begin_src sh :results silent
pip3 install icalevents recurring_ical_events pypandoc
#+end_src

#+NAME: update
#+begin_src python :session "cal" :results output drawer :var timezones=timezones :tangle yes :eval never-export
from urllib.request import urlopen
from icalendar import Calendar
from datetime import date, datetime
from dateutil.relativedelta import *
import recurring_ical_events
import pytz
import re
import pypandoc
link = "https://calendar.google.com/calendar/ical/c_rkq3fc6u8k1nem23qegqc90l6c%40group.calendar.google.com/public/basic.ics"
f = urlopen(link)
cal = Calendar.from_ical(f.read())
start_date = date(date.today().year, date.today().month, 1)
end_date = date(date.today().year + 1, date.today().month + 1, 1)
events = recurring_ical_events.of(cal).between(start_date, end_date)
for t in timezones:
  filename = "emacs-calendar-" + re.sub('^.*?/', '', t[0]).lower() + '.org'
  zone = pytz.timezone(t[0])
  with open(filename, "w") as f:
    for e in events:
      start = e['DTSTART'].dt.astimezone(zone)
      org_date = "%Y-%m-%d %a %H:%M" # 2006-11-01 Wed 19:15
      end = e['DTEND'].dt.astimezone(zone)
      f.write("""* %s
:PROPERTIES:
:LOCATION: %s
:END:
<%s>--<%s>

%s

""" % (e['SUMMARY'], e['LOCATION'], start.strftime(org_date), end.strftime(org_date), pypandoc.convert_text(e['DESCRIPTION'], 'org', format='html').replace('\\\\', '')))
# Prepare string for copying
highlight_start = datetime.utcnow()
highlight_end = datetime.utcnow() + relativedelta(months=+1)
for e in events:
  utc = datetime.utcfromtimestamp(e['DTSTART'].dt)
  if utc < highlight_start or utc > highlight_end:
    continue
  times = [[e['DTSTART'].dt.astimezone(pytz.timezone(t[0])), t[0], e['DTSTART'].dt.astimezone(pytz.timezone(t[0])).utcoffset()] for t in timezones]
  times.sort(key=lambda x: x[2])
  s = ""
  for i, t in enumerate(times):
    if i == 0 or t[0].day == times[i - 1][0].day:
       if i > 0:
         s += " // "
       s += t[0].strftime('%a %b %-d %H%M') + " " + t[1]
    else:
       s += " / " + t[0].strftime('%H%M') + " " + t[1]
  print("- %s %s %s" % (e['SUMMARY'], e['LOCATION'], s))
#+end_src

#+RESULTS:
:results:
:end:

** Sync

#+NAME: sync
#+begin_src sh :exports code :eval never-export
rsync -avze ssh ./ web:/var/www/emacslife.com/calendar/ --exclude=.git
#+end_src

** Convert timezones
 
   #+begin_src emacs-lisp :tangle yes :var timezones=timezones
(defvar my/timezones nil "Timezones")
(setq my/timezones (mapcar 'car timezones))
(defun my/summarize-times (time timezones)
  (let (prev-day)
    (mapconcat
     (lambda (tz)
       (let ((cur-day (format-time-string "%a %b %-e" time tz))
             (cur-time (format-time-string "%H%MH %Z" time tz)))
         (if (equal prev-day cur-day)
             cur-time
           (setq prev-day cur-day)
           (concat cur-day " " cur-time))))
     (sort timezones (lambda (a b) (< (car (current-time-zone nil a)) (car (current-time-zone nil b)))))
     " / ")))

(defun my/org-summarize-event-in-timezones ()
  (interactive)
  (save-window-excursion
    (save-excursion
      (when (derived-mode-p 'org-agenda-mode) (org-agenda-goto))
      (when (re-search-forward org-element--timestamp-regexp nil (save-excursion (org-end-of-subtree) (point)))
        (goto-char (match-beginning 0))
        (let* ((times (org-element-timestamp-parser))
               (start-time (org-timestamp-to-time (org-timestamp-split-range times)))
               (msg (format "%s - %s - %s"
                            (org-get-heading t t t t)
                            (my/summarize-times start-time my/timezones)
                            ;; (cond
                            ;;  ((time-less-p (org-timestamp-to-time (org-timestamp-split-range times t)) (current-time))
                            ;;   "(past)")
                            ;;  ((time-less-p (current-time) start-time)
                            ;;   (concat "in " (format-seconds "%D %H %M%Z" (time-subtract start-time (current-time)))))
                            ;;  (t "(ongoing)"))
                            (org-entry-get (point) "LOCATION"))))
          (if (interactive-p)
              (progn
                (message "%s" msg)
                (kill-new msg))
            msg))))))
#+end_src

#+RESULTS:
: my/org-summarize-event-in-timezones

** Summarize upcoming ones

   #+begin_src emacs-lisp :tangle yes
(defun my/summarize-upcoming-events (limit)
  (interactive (list (org-read-date nil t)))
  (let (result)
    (with-current-buffer (find-file-noselect "~/code/emacs-calendar/emacs-calendar-toronto.org")
      (goto-char (point-min))
      (org-map-entries
       (lambda ()
         (save-excursion
           (when (re-search-forward org-element--timestamp-regexp nil (save-excursion (org-end-of-subtree) (point)))
             (goto-char (match-beginning 0))
             (let ((time (org-timestamp-to-time (org-timestamp-split-range (org-element-timestamp-parser)))))
               (when (and (time-less-p (current-time) time)
                          (time-less-p time limit))
                 (setq result (cons (my/org-summarize-event-in-timezones) result)))))))))
    (insert (mapconcat (lambda (o) (format "- %s" o)) (reverse result) "\n"))))
#+end_src

#+RESULTS:
: my/summarize-upcoming-events

** Update EmacsWiki

#+begin_src emacs-lisp  :results nil
(use-package oddmuse
:load-path "~/vendor/oddmuse-el"
:ensure nil
:config (oddmuse-mode-initialize)
:hook (oddmuse-mode-hook .
          (lambda ()
            (unless (string-match "question" oddmuse-post)
              (when (string-match "EmacsWiki" oddmuse-wiki)
                (setq oddmuse-post (concat "uihnscuskc=1;" oddmuse-post)))
              (when (string-match "OddmuseWiki" oddmuse-wiki)
                (setq oddmuse-post (concat "ham=1;" oddmuse-post)))))))
#+end_src


[[elisp:(oddmuse-edit "EmacsWiki" "Usergroups")]]

#+end_src
** Testing agenda files :noexport:

#+begin_src emacs-lisp :exports results :var timezones=timezones :results list
  (mapcar (lambda (o) (org-link-make-string (format "elisp:(let ((org-agenda-files (list (expand-file-name \"emacs-calendar-%s.org\")))) (org-agenda-list nil nil 31))" (downcase (replace-regexp-in-string "^.*?/" "" (car o)))) (format "View %s agenda" (car o)))) timezones)
#+end_src

#+RESULTS:
- [[elisp:(let ((org-agenda-files (list (expand-file-name "emacs-calendar-gmt.org")))) (org-agenda-list nil nil 31))][View Etc/GMT agenda]]
- [[elisp:(let ((org-agenda-files (list (expand-file-name "emacs-calendar-vancouver.org")))) (org-agenda-list nil nil 31))][View America/Vancouver agenda]]
- [[elisp:(let ((org-agenda-files (list (expand-file-name "emacs-calendar-chicago.org")))) (org-agenda-list nil nil 31))][View America/Chicago agenda]]
- [[elisp:(let ((org-agenda-files (list (expand-file-name "emacs-calendar-toronto.org")))) (org-agenda-list nil nil 31))][View America/Toronto agenda]]
- [[elisp:(let ((org-agenda-files (list (expand-file-name "emacs-calendar-kolkata.org")))) (org-agenda-list nil nil 31))][View Asia/Kolkata agenda]]
- [[elisp:(let ((org-agenda-files (list (expand-file-name "emacs-calendar-shanghai.org")))) (org-agenda-list nil nil 31))][View Asia/Shanghai agenda]]
- [[elisp:(let ((org-agenda-files (list (expand-file-name "emacs-calendar-singapore.org")))) (org-agenda-list nil nil 31))][View Asia/Singapore agenda]]
- [[elisp:(let ((org-agenda-files (list (expand-file-name "emacs-calendar-berlin.org")))) (org-agenda-list nil nil 31))][View Europe/Berlin agenda]]




