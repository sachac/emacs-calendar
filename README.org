#+TITLE: Emacs calendar

* Actions  :noexport:

#+CALL: update() :results none :eval never-export
#+CALL: sync() :results none :eval never-export

* Upcoming events

#+begin_src emacs-lisp :noweb no-export :tangle no :var timezones=timezones :results drawer :exports both 
<<convert-timezones>>
<<upcoming-events>>
(my/summarize-upcoming-events (org-read-date nil t "+4w"))
#+end_src

#+RESULTS:
:results:
- EmacsFFM: Creating our own major mode (virtual) - Wed Feb 17 1900H GMT / 2000H CET / Thu Feb 18 0030H IST / 0300H CST / 0300H +08 - https://www.meetup.com/emacs-ffm/events/275881281/
- Emacs Berlin (virtual, in English) - Wed Feb 24 1730H GMT / 1830H CET / 2300H IST / Thu Feb 25 0130H CST / 0130H +08 - https://emacs-berlin.org/
- Emacs Berlin (virtual, in English) - Wed Feb 24 1730H GMT / 1830H CET / 2300H IST / Thu Feb 25 0130H CST / 0130H +08 - https://emacs-berlin.org/
- Emacs Berlin (virtual, in English) - Wed Feb 24 1730H GMT / 1830H CET / 2300H IST / Thu Feb 25 0130H CST / 0130H +08 - https://emacs-berlin.org/
- Emacs Berlin (virtual, in English) - Wed Feb 24 1730H GMT / 1830H CET / 2300H IST / Thu Feb 25 0130H CST / 0130H +08 - https://emacs-berlin.org/
- Emacs APAC (virtual, in English) - Sat Feb 27 0030H PST / 0230H CST / 0330H EST / 0830H GMT / 0930H CET / 1400H IST / 1630H CST / 1630H +08 - https://emacs-apac.gitlab.io/
- Emacs Paris (virtual) - Thu Mar 4 1630H GMT / 1730H CET / 2200H IST / Fri Mar 5 0030H CST / 0030H +08 - 
- Emacs Paris (virtual) - Thu Mar 4 1630H GMT / 1730H CET / 2200H IST / Fri Mar 5 0030H CST / 0030H +08 - 
- Emacs Paris (virtual) - Thu Mar 4 1630H GMT / 1730H CET / 2200H IST / Fri Mar 5 0030H CST / 0030H +08 - 
- Emacs Paris (virtual) - Thu Mar 4 1630H GMT / 1730H CET / 2200H IST / Fri Mar 5 0030H CST / 0030H +08 - 
- Emacs Paris (virtual) - Thu Mar 4 1630H GMT / 1730H CET / 2200H IST / Fri Mar 5 0030H CST / 0030H +08 - 
- Emacs Paris (virtual) - Thu Mar 4 1630H GMT / 1730H CET / 2200H IST / Fri Mar 5 0030H CST / 0030H +08 - 
- Emacs Paris (virtual) - Thu Mar 4 1630H GMT / 1730H CET / 2200H IST / Fri Mar 5 0030H CST / 0030H +08 - 
:end:

* Introduction
  
This calendar is maintained by [[mailto:sacha@sachachua.com][sacha@sachachua.com]]. You can find it at https://emacslife.com/calendar/

You can find a list of upcoming events and other meet-ups at
https://www.emacswiki.org/emacs/Usergroups.

Or you can add this iCal to your calendar program:

https://calendar.google.com/calendar/ical/c_rkq3fc6u8k1nem23qegqc90l6c%40group.calendar.google.com/public/basic.ics

Or you view the following HTML calendars:

#+begin_src emacs-lisp :exports results :var timezones=timezones :results list
  (mapcar (lambda (o) (org-link-make-string (format "file:emacs-calendar-%s.html" (downcase (replace-regexp-in-string "^.*?/" "" (car o)))) (car o))) timezones)
#+end_src

#+RESULTS:
- [[file:emacs-calendar-gmt.html][Etc/GMT]]
- [[file:emacs-calendar-vancouver.html][America/Vancouver]]
- [[file:emacs-calendar-chicago.html][America/Chicago]]
- [[file:emacs-calendar-toronto.html][America/Toronto]]
- [[file:emacs-calendar-kolkata.html][Asia/Kolkata]]
- [[file:emacs-calendar-shanghai.html][Asia/Shanghai]]
- [[file:emacs-calendar-singapore.html][Asia/Singapore]]
- [[file:emacs-calendar-berlin.html][Europe/Berlin]]

(Let me know if you want me to add yours! - [[mailto:sacha@sachachua.com]])

Or you periodically download and include one of these files in your Org agenda files:

#+begin_src emacs-lisp :exports results :var timezones=timezones :wrap export html
(concat "<ul>"
   (mapconcat (lambda (o) (let ((file (concat "emacs-calendar-" (downcase (replace-regexp-in-string "^.*?/" "" (car o))) ".org")))
                         (format "<li><a href=\"%s\">%s</a></li>" file file)))
           timezones "\n")
"</ul>")
#+end_src

#+RESULTS:
#+begin_export html
<ul><li><a href="emacs-calendar-gmt.org">emacs-calendar-gmt.org</a></li>
<li><a href="emacs-calendar-vancouver.org">emacs-calendar-vancouver.org</a></li>
<li><a href="emacs-calendar-chicago.org">emacs-calendar-chicago.org</a></li>
<li><a href="emacs-calendar-toronto.org">emacs-calendar-toronto.org</a></li>
<li><a href="emacs-calendar-kolkata.org">emacs-calendar-kolkata.org</a></li>
<li><a href="emacs-calendar-shanghai.org">emacs-calendar-shanghai.org</a></li>
<li><a href="emacs-calendar-singapore.org">emacs-calendar-singapore.org</a></li>
<li><a href="emacs-calendar-berlin.org">emacs-calendar-berlin.org</a></li></ul>
#+end_export

Enjoy!

* Code I use to run it
** Timezones

#+NAME: timezones
- America/Vancouver
- America/Chicago
- America/Toronto
- Etc/GMT
- Europe/Berlin
- Asia/Kolkata
- Asia/Singapore

** Download and parse the iCal file with Python

#+begin_src sh :results silent
pip3 install icalevents recurring_ical_events pypandoc
#+end_src

#+NAME: update
#+begin_src python :session "cal" :results output drawer :var timezones=timezones :tangle yes :eval never-export
from urllib.request import urlopen
from icalendar import Calendar
from datetime import date, datetime
from dateutil.relativedelta import *
import recurring_ical_events
import pytz
import re
import pypandoc
link = "https://calendar.google.com/calendar/ical/c_rkq3fc6u8k1nem23qegqc90l6c%40group.calendar.google.com/public/basic.ics"
f = urlopen(link)
cal = Calendar.from_ical(f.read())
start_date = date(date.today().year, date.today().month, 1)
end_date = date(date.today().year + 1, date.today().month + 1, 1)
events = recurring_ical_events.of(cal).between(start_date, end_date)
events.sort(key=lambda x: x['DTSTART'].dt)
for t in timezones:
  filename = "emacs-calendar-" + re.sub('^.*?/', '', t[0]).lower() + '.org'
  zone = pytz.timezone(t[0])
  with open(filename, "w") as f:
    for e in events:
      start = e['DTSTART'].dt.astimezone(zone)
      org_date = "%Y-%m-%d %a %H:%M" # 2006-11-01 Wed 19:15
      end = e['DTEND'].dt.astimezone(zone)
      f.write("""* %s
:PROPERTIES:
:LOCATION: %s
:END:
<%s>--<%s>

%s

""" % (e['SUMMARY'], e['LOCATION'], start.strftime(org_date), end.strftime(org_date), pypandoc.convert_text(e['DESCRIPTION'], 'org', format='html').replace('\\\\', '')))
# Prepare string for copying
highlight_start = datetime.utcnow()
highlight_end = datetime.utcnow() + relativedelta(months=+1)
for e in events:
  utc = datetime.utcfromtimestamp(e['DTSTART'].dt.timestamp())
  if utc < highlight_start or utc > highlight_end:
    continue
  times = [[e['DTSTART'].dt.astimezone(pytz.timezone(t[0])), t[0], e['DTSTART'].dt.astimezone(pytz.timezone(t[0])).utcoffset()] for t in timezones]
  times.sort(key=lambda x: x[2])
  s = ""
  for i, t in enumerate(times):
    if i == 0 or t[0].day != times[i - 1][0].day:
       if i > 0:
         s += " // "
       s += t[0].strftime('%a %b %-d %H%M') + " " + re.sub('^.*?/', '', t[1])
    else:
       s += " / " + t[0].strftime('%H%M') + " " + re.sub('^.*?/', '', t[1])
  print("- %s %s %s" % (e['SUMMARY'], e['LOCATION'], s))
#+end_src

#+RESULTS: update
:results:
- EmacsSF: Discussion of emacs in general and completion frameworks in particular https://www.meetup.com/Emacs-SF/events/276234974/ Fri Feb 12 1000 Vancouver / 1200 Chicago / 1300 Toronto / 1800 GMT / 1900 Berlin / 2330 Kolkata // Sat Feb 13 0200 Singapore
- EmacsFFM: Creating our own major mode (virtual) https://www.meetup.com/emacs-ffm/events/275881281/ Wed Feb 17 1100 Vancouver / 1300 Chicago / 1400 Toronto / 1900 GMT / 2000 Berlin // Thu Feb 18 0030 Kolkata / 0300 Singapore
- Emacs Berlin (virtual, in English) https://emacs-berlin.org/ Wed Feb 24 0930 Vancouver / 1130 Chicago / 1230 Toronto / 1730 GMT / 1830 Berlin / 2300 Kolkata // Thu Feb 25 0130 Singapore
- Emacs APAC (virtual, in English) https://emacs-apac.gitlab.io/ Sat Feb 27 0030 Vancouver / 0230 Chicago / 0330 Toronto / 0830 GMT / 0930 Berlin / 1400 Kolkata / 1630 Singapore
- EmacsNYC: Mail Month https://emacsnyc.org/2021/02/03/monthly-online-meetup-mail-month.html Mon Mar 1 1600 Vancouver / 1800 Chicago / 1900 Toronto // Tue Mar 2 0000 GMT / 0100 Berlin / 0530 Kolkata / 0800 Singapore
- Emacs Paris (virtual) https://www.emacs-doctor.com/emacs-paris-user-group/  Thu Mar 4 0830 Vancouver / 1030 Chicago / 1130 Toronto / 1630 GMT / 1730 Berlin / 2200 Kolkata // Fri Mar 5 0030 Singapore
:end:


** Sync

#+NAME: sync
#+begin_src sh :exports code :eval never-export
rsync -avze ssh ./ web:/var/www/emacslife.com/calendar/ --exclude=.git
#+end_src

** Convert timezones

#+NAME: convert-timezones
#+begin_src emacs-lisp :tangle yes :var timezones=timezones
(defun my/summarize-times (time timezones)
  (let (prev-day)
    (mapconcat
     (lambda (tz)
       (let ((cur-day (format-time-string "%a %b %-e" time tz))
             (cur-time (format-time-string "%H%MH %Z" time tz)))
         (if (equal prev-day cur-day)
             cur-time
           (setq prev-day cur-day)
           (concat cur-day " " cur-time))))
     timezones
     " / ")))

(defun my/org-summarize-event-in-timezones (timezones)
  (interactive (list (or timezones my/timezones)))
  (save-window-excursion
    (save-excursion
      (when (derived-mode-p 'org-agenda-mode) (org-agenda-goto))
      (when (re-search-forward org-element--timestamp-regexp nil (save-excursion (org-end-of-subtree) (point)))
        (goto-char (match-beginning 0))
        (let* ((times (org-element-timestamp-parser))
               (start-time (org-timestamp-to-time (org-timestamp-split-range times)))
               (msg (format "%s - %s - %s"
                            (org-get-heading t t t t)
                            (my/summarize-times start-time timezones)
                            ;; (cond
                            ;;  ((time-less-p (org-timestamp-to-time (org-timestamp-split-range times t)) (current-time))
                            ;;   "(past)")
                            ;;  ((time-less-p (current-time) start-time)
                            ;;   (concat "in " (format-seconds "%D %H %M%Z" (time-subtract start-time (current-time)))))
                            ;;  (t "(ongoing)"))
                            (org-entry-get (point) "LOCATION"))))
          (if (called-interactively-p 'any)
              (progn
                (message "%s" msg)
                (kill-new msg))
            msg))))))
#+end_src

#+RESULTS: convert-timezones
: my/org-summarize-event-in-timezones

#+RESULTS:
: my/org-summarize-event-in-timezones

** Summarize upcoming ones

#+NAME: upcoming-events
#+begin_src emacs-lisp :tangle yes
(defun my/summarize-upcoming-events (limit timezones)
  (interactive (list (org-read-date nil t) my/timezones))
  (let (result)
    (with-current-buffer (find-file-noselect "~/code/emacs-calendar/emacs-calendar-toronto.org")
      (goto-char (point-min))
      (org-map-entries
       (lambda ()
         (save-excursion
           (when (re-search-forward org-element--timestamp-regexp nil (save-excursion (org-end-of-subtree) (point)))
             (goto-char (match-beginning 0))
             (let ((time (org-timestamp-to-time (org-timestamp-split-range (org-element-timestamp-parser)))))
               (when (and (time-less-p (current-time) time)
                          (time-less-p time limit))
                 (setq result (cons
                               (cons time
                                     (my/org-summarize-event-in-timezones timezones)) result)))))))))
    (setq result (mapconcat
                  (lambda (o) (format "- %s" (cdr  o)))
                  (sort result (lambda (a b)
                                 (time-less-p (car a) (car b))
                                 ))
                  "\n"))
    (if (interactive-p)
        (insert result)
      result)))
#+end_src

#+RESULTS:
: my/summarize-upcoming-events

** Update EmacsWiki

#+begin_src emacs-lisp  :results nil
(use-package oddmuse
:load-path "~/vendor/oddmuse-el"
:ensure nil
:config (oddmuse-mode-initialize)
:hook (oddmuse-mode-hook .
          (lambda ()
            (unless (string-match "question" oddmuse-post)
              (when (string-match "EmacsWiki" oddmuse-wiki)
                (setq oddmuse-post (concat "uihnscuskc=1;" oddmuse-post)))
              (when (string-match "OddmuseWiki" oddmuse-wiki)
                (setq oddmuse-post (concat "ham=1;" oddmuse-post)))))))
#+end_src


[[elisp:(oddmuse-edit "EmacsWiki" "Usergroups")]]

#+end_src
** Testing agenda files :noexport:

#+begin_src emacs-lisp :exports results :var timezones=timezones :results list
  (mapcar (lambda (o) (org-link-make-string (format "elisp:(let ((org-agenda-files (list (expand-file-name \"emacs-calendar-%s.org\")))) (org-agenda-list nil nil 31))" (downcase (replace-regexp-in-string "^.*?/" "" (car o)))) (format "View %s agenda" (car o)))) timezones)
#+end_src

#+RESULTS:
- [[elisp:(let ((org-agenda-files (list (expand-file-name "emacs-calendar-gmt.org")))) (org-agenda-list nil nil 31))][View Etc/GMT agenda]]
- [[elisp:(let ((org-agenda-files (list (expand-file-name "emacs-calendar-vancouver.org")))) (org-agenda-list nil nil 31))][View America/Vancouver agenda]]
- [[elisp:(let ((org-agenda-files (list (expand-file-name "emacs-calendar-chicago.org")))) (org-agenda-list nil nil 31))][View America/Chicago agenda]]
- [[elisp:(let ((org-agenda-files (list (expand-file-name "emacs-calendar-toronto.org")))) (org-agenda-list nil nil 31))][View America/Toronto agenda]]
- [[elisp:(let ((org-agenda-files (list (expand-file-name "emacs-calendar-kolkata.org")))) (org-agenda-list nil nil 31))][View Asia/Kolkata agenda]]
- [[elisp:(let ((org-agenda-files (list (expand-file-name "emacs-calendar-shanghai.org")))) (org-agenda-list nil nil 31))][View Asia/Shanghai agenda]]
- [[elisp:(let ((org-agenda-files (list (expand-file-name "emacs-calendar-singapore.org")))) (org-agenda-list nil nil 31))][View Asia/Singapore agenda]]
- [[elisp:(let ((org-agenda-files (list (expand-file-name "emacs-calendar-berlin.org")))) (org-agenda-list nil nil 31))][View Europe/Berlin agenda]]




